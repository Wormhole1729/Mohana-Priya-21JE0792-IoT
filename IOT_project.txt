

//Web Page

<head>
  
  <style>
    body { text-align:center; }
  </style>
</head>
<body>
  <div id="container">
    <h2>ESP32-CAM Last Photo</h2>
    <p>
      <button onclick="capturePhoto()">CAPTURE PHOTO</button>
      </p>
  </div>



function capturePhoto() {
  var xhr = new XMLHttpRequest();
  xhr.open('GET', "/capture", true);
  xhr.send();
}


















#include "WiFi.h"
#include "esp_camera.h"
#include "esp_timer.h"
#include "img_converters.h"
#include "Arduino.h"
#include "soc/soc.h"           // Disable brownout problems
#include "soc/rtc_cntl_reg.h"  // Disable brownout problems
#include "driver/rtc_io.h"
#include <ESPAsyncWebServer.h>
#include <StringArray.h>
#include <SPIFFS.h>
#include <FS.h>



const char* ssid = "Pest_Monitoring";
const char* password = "Happy_To_Help_1";



AsyncWebServer server(80);				//Create an AsyncWebServer object on port 80.

boolean ClickNewPic = false;				//The ClickNewPic boolean variable indicates when itâ€™s time to take a new photo.


#define FILE_PHOTO "/photo.jpg"				//defining the path and name of the photo to be saved in SPIFFS.


//define the camera pins for the ESP32-CAM AI THINKER module.
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22



void setup() {
	Serial.begin(115200);
	WiFi.begin(ssid, password);
	while (WiFi.status() != WL_CONNECTED) {
  		delay(1000);
  		Serial.println("Connecting to WiFi...");
	}


	if (!SPIFFS.begin(true)) {
  		Serial.println("An Error has occurred while mounting SPIFFS");
  		ESP.restart();
	}
	else {
  		delay(500);
  		Serial.println("SPIFFS mounted successfully");
	} 

  	// Print ESP32 Local IP Address
  	Serial.print("IP Address: http://");
  	Serial.println(WiFi.localIP());


	server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
  		request->send_P(200, "text/html", index_html);
	});


	server.on("/capture", HTTP_GET, [](AsyncWebServerRequest * request) {
  		ClickNewPic = true;
  		request->send_P(200, "text/plain", "Taking Photo");
	});


	server.on("/saved-photo", HTTP_GET, [](AsyncWebServerRequest * request) {
  		request->send(SPIFFS, FILE_PHOTO, "image/jpg", false);
	});


	server.begin();



void loop() {
  	if (ClickNewPic) {
    		capturePhotoSaveSpiffs();
    		ClickNewPic = false;
  		}
  	delay(1);
	}





void capturePhotoSaveSpiffs( void ) {
	camera_fb_t * fb = NULL; // pointer
  	bool ok = 0; // Boolean indicating if the picture has been taken correctly

  	do {
    	// Take a photo with the camera
    	Serial.println("Taking a photo...");

    	fb = esp_camera_fb_get();
    	if (!fb) {
      		Serial.println("Camera capture failed");
      return;
    }

    // Photo file name
    Serial.printf("Picture file name: %s\n", FILE_PHOTO);
    File file = SPIFFS.open(FILE_PHOTO, FILE_WRITE);

    // Insert the data in the photo file
    if (!file) {
      Serial.println("Failed to open file in writing mode");
    }
    else {
      file.write(fb->buf, fb->len); // payload (image), payload length
      Serial.print("The picture has been saved in ");
      Serial.print(FILE_PHOTO);
      Serial.print(" - Size: ");
      Serial.print(file.size());
      Serial.println(" bytes");
    }
    // Close the file
    file.close();
    esp_camera_fb_return(fb);

    
}





